--==========================
-- LAST CHANGE SQL:
--==========================

-- FIRST STEP: FIND ALL CHANGED CLIENT KEYS:

INSERT INTO GT_REFR_CLT (FKREFERL_T,FKCLIENT_T,SENSTV_IND)
SELECT DISTINCT '' AS FKREFERL_T, s1.CLIENT_ID, '' AS SENSTV_IND FROM (
     SELECT DISTINCT CLT.IDENTIFIER AS CLIENT_ID
     FROM CLIENT_T clt
     WHERE CLT.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
 UNION SELECT DISTINCT cla.FKCLIENT_T AS CLIENT_ID
     FROM CL_ADDRT cla
     WHERE CLA.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
 UNION SELECT DISTINCT cla.FKCLIENT_T AS CLIENT_ID
     FROM CL_ADDRT cla
     JOIN ADDRS_T  adr ON cla.FKADDRS_T  = adr.IDENTIFIER
     WHERE ADR.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
 UNION SELECT DISTINCT eth.ESTBLSH_ID AS CLIENT_ID
     FROM CLSCP_ET eth
     WHERE ETH.ESTBLSH_CD = 'C'
     AND ETH.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
) s1
UNION
SELECT DISTINCT '' AS FKREFERL_T, s2.CLIENT_ID, '' AS SENSTV_IND FROM (
     SELECT DISTINCT pe.FKCLIENT_T AS CLIENT_ID
     FROM PLC_EPST pe
     WHERE pe.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
 UNION SELECT DISTINCT ohp.FKPLC_EPST AS CLIENT_ID
     FROM O_HM_PLT ohp
     JOIN PLC_HM_T ph ON ph.IDENTIFIER = ohp.FKPLC_HM_T
     WHERE ph.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
     AND DATE('2018-07-16 14:46:45.251') BETWEEN OHP.START_DT AND NVL(OHP.END_DT, DATE('2018-07-16 14:46:45.251'))
 UNION SELECT DISTINCT ohp.FKPLC_EPST AS CLIENT_ID
     FROM O_HM_PLT ohp
     WHERE ohp.IBMSNAP_LOGMARKER BETWEEN '2018-07-16 14:41:25.000' AND '2018-07-16 14:46:45.251'
) s2 ;


-- BUNDLE STEP: Clear the global temporary table for identifiers for this session/thread:

DELETE FROM GT_ID ;


-- BUNDLE STEP: Move next key bundle into the global temporary table:

INSERT INTO GT_ID (IDENTIFIER) 
SELECT x.IDENTIFIER FROM ( 
   SELECT rc.FKCLIENT_T AS IDENTIFIER, ROW_NUMBER() OVER(ORDER BY rc.FKCLIENT_T) AS rn 
   FROM GT_REFR_CLT rc 
) x 
WHERE x.rn BETWEEN ? AND ? ;


-- BUNDLE STEP: Pull client information:

SELECT  
    clt.IDENTIFIER        AS CLT_IDENTIFIER, 
    clt.LST_UPD_ID        AS CLT_LST_UPD_ID, 
    clt.LST_UPD_TS        AS CLT_LST_UPD_TS, 
    clt.ADJDEL_IND        AS CLT_ADJDEL_IND, 
    clt.ADPTN_STCD        AS CLT_ADPTN_STCD, 
    clt.ALN_REG_NO        AS CLT_ALN_REG_NO, 
    clt.BIRTH_CITY        AS CLT_BIRTH_CITY, 
    clt.B_CNTRY_C         AS CLT_B_CNTRY_C, 
    clt.BIRTH_DT          AS CLT_BIRTH_DT, 
    clt.BR_FAC_NM         AS CLT_BR_FAC_NM, 
    clt.B_STATE_C         AS CLT_B_STATE_C, 
    clt.BP_VER_IND        AS CLT_BP_VER_IND, 
    clt.CHLD_CLT_B        AS CLT_CHLD_CLT_B, 
    clt.CL_INDX_NO        AS CLT_CL_INDX_NO, 
    clt.COMMNT_DSC        AS CLT_COMMNT_DSC, 
    clt.COM_FST_NM        AS CLT_COM_FST_NM, 
    clt.COM_LST_NM        AS CLT_COM_LST_NM, 
    clt.COM_MID_NM        AS CLT_COM_MID_NM, 
    clt.CONF_ACTDT        AS CLT_CONF_ACTDT, 
    clt.CONF_EFIND        AS CLT_CONF_EFIND, 
    clt.CREATN_DT         AS CLT_CREATN_DT, 
    clt.CURRCA_IND        AS CLT_CURRCA_IND, 
    clt.COTH_DESC         AS CLT_COTH_DESC, 
    clt.CURREG_IND        AS CLT_CURREG_IND, 
    clt.DEATH_DT          AS CLT_DEATH_DT, 
    clt.DTH_DT_IND        AS CLT_DTH_DT_IND, 
    clt.DEATH_PLC         AS CLT_DEATH_PLC, 
    clt.DTH_RN_TXT        AS CLT_DTH_RN_TXT, 
    clt.DRV_LIC_NO        AS CLT_DRV_LIC_NO, 
    clt.D_STATE_C         AS CLT_D_STATE_C, 
    clt.EMAIL_ADDR        AS CLT_EMAIL_ADDR, 
    clt.EST_DOB_CD        AS CLT_EST_DOB_CD, 
    clt.ETH_UD_CD         AS CLT_ETH_UD_CD, 
    clt.FTERM_DT          AS CLT_FTERM_DT, 
    clt.GENDER_CD         AS CLT_GENDER_CD, 
    clt.HEALTH_TXT        AS CLT_HEALTH_TXT, 
    clt.HISP_UD_CD        AS CLT_HISP_UD_CD, 
    clt.HISP_CD           AS CLT_HISP_CD, 
    clt.I_CNTRY_C         AS CLT_I_CNTRY_C, 
    clt.IMGT_STC          AS CLT_IMGT_STC, 
    clt.INCAPC_CD         AS CLT_INCAPC_CD, 
    clt.HCARE_IND         AS CLT_HCARE_IND, 
    clt.LIMIT_IND         AS CLT_LIMIT_IND, 
    clt.LITRATE_CD        AS CLT_LITRATE_CD, 
    clt.MAR_HIST_B        AS CLT_MAR_HIST_B, 
    clt.MRTL_STC          AS CLT_MRTL_STC, 
    clt.MILT_STACD        AS CLT_MILT_STACD, 
    clt.MTERM_DT          AS CLT_MTERM_DT, 
    clt.NMPRFX_DSC        AS CLT_NMPRFX_DSC, 
    clt.NAME_TPC          AS CLT_NAME_TPC, 
    clt.OUTWRT_IND        AS CLT_OUTWRT_IND, 
    clt.PREVCA_IND        AS CLT_PREVCA_IND, 
    clt.POTH_DESC         AS CLT_POTH_DESC, 
    clt.PREREG_IND        AS CLT_PREREG_IND, 
    clt.P_ETHNCTYC        AS CLT_P_ETHNCTYC, 
    clt.P_LANG_TPC        AS CLT_P_LANG_TPC, 
    clt.RLGN_TPC          AS CLT_RLGN_TPC, 
    clt.S_LANG_TC         AS CLT_S_LANG_TC, 
    clt.SNTV_HLIND        AS CLT_SNTV_HLIND, 
    clt.SENSTV_IND        AS CLT_SENSTV_IND, 
    clt.SOCPLC_CD         AS CLT_SOCPLC_CD, 
    clt.SOC158_IND        AS CLT_SOC158_IND, 
    clt.SSN_CHG_CD        AS CLT_SSN_CHG_CD, 
    clt.SS_NO             AS CLT_SS_NO, 
    clt.SUFX_TLDSC        AS CLT_SUFX_TLDSC, 
    clt.TRBA_CLT_B        AS CLT_TRBA_CLT_B, 
    clt.TR_MBVRT_B        AS CLT_TR_MBVRT_B, 
    clt.UNEMPLY_CD        AS CLT_UNEMPLY_CD, 
    clt.ZIPPY_IND         AS CLT_ZIPPY_IND, 
    clt.IBMSNAP_LOGMARKER AS CLT_IBMSNAP_LOGMARKER, 
    clt.IBMSNAP_OPERATION AS CLT_IBMSNAP_OPERATION, 
    cla.IDENTIFIER        AS CLA_IDENTIFIER, 
    cla.LST_UPD_ID        AS CLA_LST_UPD_ID, 
    cla.LST_UPD_TS        AS CLA_LST_UPD_TS, 
    cla.ADDR_TPC          AS CLA_ADDR_TPC, 
    cla.BK_INMT_ID        AS CLA_BK_INMT_ID, 
    cla.EFF_END_DT        AS CLA_EFF_END_DT, 
    cla.EFF_STRTDT        AS CLA_EFF_STRTDT, 
    cla.FKADDRS_T         AS CLA_FKADDRS_T, 
    cla.FKCLIENT_T        AS CLA_FKCLIENT_T, 
    cla.FKREFERL_T        AS CLA_FKREFERL_T, 
    cla.HOMLES_IND        AS CLA_HOMLES_IND, 
    cla.IBMSNAP_LOGMARKER AS CLA_IBMSNAP_LOGMARKER, 
    cla.IBMSNAP_OPERATION AS CLA_IBMSNAP_OPERATION, 
    adr.IDENTIFIER        AS ADR_IDENTIFIER, 
    adr.LST_UPD_ID        AS ADR_LST_UPD_ID, 
    adr.LST_UPD_TS        AS ADR_LST_UPD_TS, 
    TRIM(adr.ADDR_DSC)    AS ADR_ADDR_DSC, 
    TRIM(adr.CITY_NM)     AS ADR_CITY_NM, 
    adr.EMRG_EXTNO        AS ADR_EMRG_EXTNO, 
    adr.EMRG_TELNO        AS ADR_EMRG_TELNO, 
    adr.FRG_ADRT_B        AS ADR_FRG_ADRT_B, 
    adr.GVR_ENTC          AS ADR_GVR_ENTC, 
    TRIM(adr.HEADER_ADR)  AS ADR_HEADER_ADR, 
    adr.MSG_EXT_NO        AS ADR_MSG_EXT_NO, 
    adr.MSG_TEL_NO        AS ADR_MSG_TEL_NO, 
    TRIM(adr.POSTDIR_CD)  AS ADR_POSTDIR_CD, 
    TRIM(adr.PREDIR_CD)   AS ADR_PREDIR_CD, 
    adr.PRM_EXT_NO        AS ADR_PRM_EXT_NO, 
    adr.PRM_TEL_NO        AS ADR_PRM_TEL_NO, 
    adr.STATE_C           AS ADR_STATE_C, 
    TRIM(adr.STREET_NM)   AS ADR_STREET_NM, 
    TRIM(adr.STREET_NO)   AS ADR_STREET_NO, 
    adr.ST_SFX_C          AS ADR_ST_SFX_C, 
    adr.UNT_DSGC          AS ADR_UNT_DSGC, 
    TRIM(adr.UNIT_NO)     AS ADR_UNIT_NO, 
    TRIM(adr.ZIP_NO)      AS ADR_ZIP_NO, 
    adr.ZIP_SFX_NO        AS ADR_ZIP_SFX_NO, 
    adr.IBMSNAP_LOGMARKER AS ADR_IBMSNAP_LOGMARKER, 
    adr.IBMSNAP_OPERATION AS ADR_IBMSNAP_OPERATION, 
    eth.IDENTIFIER        AS ETH_IDENTIFIER, 
    eth.ETHNCTYC          AS ETHNICITY_CODE, 
    eth.IBMSNAP_LOGMARKER AS ETH_IBMSNAP_LOGMARKER, 
    eth.IBMSNAP_OPERATION AS ETH_IBMSNAP_OPERATION, 
    clc.CLIENT_ID         AS CLC_CLIENT_ID, 
    clc.GVR_ENTC          AS CLC_GVR_ENTC, 
    clc.LST_UPD_TS        AS LST_UPD_TS, 
    clc.LST_UPD_OP        AS CLC_LST_UPD_OP, 
    clc.CNTY_RULE         AS CLC_CNTY_RULE, 
    sal.THIRD_ID          AS SAL_THIRD_ID, 
    sal.ACTV_RNC          AS SAL_ACTV_RNC, 
    sal.ACTV_DT           AS SAL_ACTV_DT, 
    sal.ACTV_GEC          AS SAL_ACTV_GEC, 
    sal.ACTV_TXT          AS SAL_ACTV_TXT, 
    sal.DACT_DT           AS SAL_DACT_DT, 
    sal.DACT_GEC          AS SAL_DACT_GEC, 
    sal.DACT_TXT          AS SAL_DACT_TXT, 
    sal.LST_UPD_ID        AS SAL_LST_UPD_ID, 
    sal.LST_UPD_TS        AS SAL_LST_UPD_TS, 
    sal.IBMSNAP_LOGMARKER AS SAL_IBMSNAP_LOGMARKER, 
    sal.IBMSNAP_OPERATION AS SAL_IBMSNAP_OPERATION, 
    onm.THIRD_ID          AS ONM_THIRD_ID, 
    onm.FIRST_NM          AS ONM_FIRST_NM, 
    onm.LAST_NM           AS ONM_LAST_NM, 
    onm.MIDDLE_NM         AS ONM_MIDDLE_NM, 
    onm.NMPRFX_DSC        AS ONM_NMPRFX_DSC, 
    onm.NAME_TPC          AS ONM_NAME_TPC, 
    onm.SUFX_TLDSC        AS ONM_SUFX_TLDSC, 
    onm.LST_UPD_ID        AS ONM_LST_UPD_ID, 
    onm.LST_UPD_TS        AS ONM_LST_UPD_TS, 
    onm.IBMSNAP_OPERATION AS ONM_IBMSNAP_OPERATION, 
    onm.IBMSNAP_LOGMARKER AS ONM_IBMSNAP_LOGMARKER, 
    cas.IDENTIFIER        AS CAS_IDENTIFIER, 
    cas.RSP_AGY_CD        AS CAS_RSP_AGY_CD, 
    cas.IBMSNAP_OPERATION AS CAS_IBMSNAP_OPERATION, 
    cas.IBMSNAP_LOGMARKER AS CAS_IBMSNAP_LOGMARKER, 
    MAX(  clt.IBMSNAP_LOGMARKER, 
      NVL(cla.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(adr.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(eth.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(clc.LST_UPD_TS,        TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(sal.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(onm.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01')), 
      NVL(cas.IBMSNAP_LOGMARKER, TIMESTAMP('2018-02-07 01:01:01'))   
    ) LAST_CHG 
FROM      GT_ID        gt 
JOIN      CLIENT_T    clt ON clt.IDENTIFIER = gt.IDENTIFIER 
LEFT JOIN CL_ADDRT    cla ON clt.IDENTIFIER = cla.FKCLIENT_T AND cla.EFF_END_DT IS NULL 
LEFT JOIN ADDRS_T     adr ON cla.FKADDRS_T  = adr.IDENTIFIER 
LEFT JOIN CLSCP_ET    eth ON clt.IDENTIFIER = eth.ESTBLSH_ID AND eth.ESTBLSH_CD = 'C' 
LEFT JOIN CLIENT_CNTY clc ON clt.IDENTIFIER = clc.CLIENT_ID 
LEFT JOIN SAF_ALRT    sal ON sal.FKCLIENT_T = clt.IDENTIFIER 
LEFT JOIN OCL_NM_T    onm ON onm.FKCLIENT_T = clt.IDENTIFIER 
LEFT JOIN CASE_T      cas ON cas.FKCHLD_CLT = clt.IDENTIFIER AND cas.END_DT IS NULL 
ORDER BY CLT_IDENTIFIER 
OPTIMIZE FOR 100 ROWS 
FOR READ ONLY WITH UR ;


-- BUNDLE STEP: Pull placement home data:

SELECT
 x.FKCLIENT_T CLIENT_ID, x.THIRD_ID PE_THIRD_ID, x.PE_GVR_ENTC,
 x.OHP_ID, x.START_DT, x.END_DT,
 x.PH_ID, x.PH_GVR_ENTC, x.STREET_NO, x.STREET_NM,
 x.CITY_NM, x.STATE_C, x.ZIP_NO, x.ZIP_SFX_NO, x.PH_LST_UPD_TS,
 x.PRM_TEL_NO, x.PRM_EXT_NO
FROM (
 SELECT
     PE.FKCLIENT_T, PE.THIRD_ID, PE.GVR_ENTC PE_GVR_ENTC
   , OHP.IDENTIFIER OHP_ID, ohp.START_DT, ohp.END_DT
   , PH.IDENTIFIER PH_ID, PH.GVR_ENTC PH_GVR_ENTC
   , TRIM(PH.STREET_NO) STREET_NO, TRIM(PH.STREET_NM) STREET_NM, TRIM(PH.CITY_NM) CITY_NM
   , PH.F_STATE_C STATE_C, PH.ZIP_NO, PH.ZIP_SFX_NO, ph.LST_UPD_TS PH_LST_UPD_TS
   , PH.PRM_TEL_NO, PH.PRM_EXT_NO
   , DENSE_RANK() OVER (PARTITION BY PE.FKCLIENT_T ORDER BY OHP.START_DT, OHP.END_DT) RN
 FROM GT_ID GT
 JOIN PLC_EPST PE  ON GT.IDENTIFIER  = PE.FKCLIENT_T
 JOIN O_HM_PLT OHP ON OHP.FKPLC_EPS0 = PE.THIRD_ID AND OHP.FKPLC_EPST = PE.FKCLIENT_T
 JOIN PLC_HM_T PH  ON PH.IDENTIFIER  = OHP.FKPLC_HM_T
 WHERE DATE('2018-07-16 14:46:45.250') BETWEEN OHP.START_DT AND NVL(OHP.END_DT, DATE('2018-07-16 14:46:45.250'))
   AND PE.IBMSNAP_OPERATION  IN ('I','U')
   AND OHP.IBMSNAP_OPERATION IN ('I','U')
   AND PH.IBMSNAP_OPERATION  IN ('I','U')
 ORDER BY FKCLIENT_T, START_DT
) X
WHERE X.RN = 1
ORDER BY CLIENT_ID, START_DT
OPTIMIZE FOR 100 ROWS
FOR READ ONLY WITH UR ;


--==========================
-- FULL/INITIAL LOAD:
--==========================

-- BUNDLE STEP: Pull from Client MQT:

SELECT x.* 
FROM MQT_CLIENT_ADDRESS x 
WHERE X.CLT_IDENTIFIER BETWEEN 'aaaaaaaaaa' AND '9999999999'
ORDER BY X.CLT_IDENTIFIER
FOR READ ONLY WITH UR ;


-- BUNDLE STEP: Find affected placement episodes for client range:

INSERT INTO GT_ID (IDENTIFIER)  
SELECT DISTINCT pe.FKCLIENT_T 
FROM PLC_EPST pe  
WHERE pe.FKCLIENT_T BETWEEN ? AND ? AND pe.IBMSNAP_OPERATION IN ('I','U');


-- BUNDLE STEP: Pull placement home data (same as last change mode):

SELECT
 x.FKCLIENT_T CLIENT_ID, x.THIRD_ID PE_THIRD_ID, x.PE_GVR_ENTC,
 x.OHP_ID, x.START_DT, x.END_DT,
 x.PH_ID, x.PH_GVR_ENTC, x.STREET_NO, x.STREET_NM,
 x.CITY_NM, x.STATE_C, x.ZIP_NO, x.ZIP_SFX_NO, x.PH_LST_UPD_TS,
 x.PRM_TEL_NO, x.PRM_EXT_NO
FROM (
 SELECT
     PE.FKCLIENT_T, PE.THIRD_ID, PE.GVR_ENTC PE_GVR_ENTC
   , OHP.IDENTIFIER OHP_ID, ohp.START_DT, ohp.END_DT
   , PH.IDENTIFIER PH_ID, PH.GVR_ENTC PH_GVR_ENTC
   , TRIM(PH.STREET_NO) STREET_NO, TRIM(PH.STREET_NM) STREET_NM, TRIM(PH.CITY_NM) CITY_NM
   , PH.F_STATE_C STATE_C, PH.ZIP_NO, PH.ZIP_SFX_NO, ph.LST_UPD_TS PH_LST_UPD_TS
   , PH.PRM_TEL_NO, PH.PRM_EXT_NO
   , DENSE_RANK() OVER (PARTITION BY PE.FKCLIENT_T ORDER BY OHP.START_DT, OHP.END_DT) RN
 FROM GT_ID GT
 JOIN PLC_EPST PE  ON GT.IDENTIFIER  = PE.FKCLIENT_T
 JOIN O_HM_PLT OHP ON OHP.FKPLC_EPS0 = PE.THIRD_ID AND OHP.FKPLC_EPST = PE.FKCLIENT_T
 JOIN PLC_HM_T PH  ON PH.IDENTIFIER  = OHP.FKPLC_HM_T
 WHERE DATE('2018-07-16 14:46:45.250') BETWEEN OHP.START_DT AND NVL(OHP.END_DT, DATE('2018-07-16 14:46:45.250'))
   AND PE.IBMSNAP_OPERATION  IN ('I','U')
   AND OHP.IBMSNAP_OPERATION IN ('I','U')
   AND PH.IBMSNAP_OPERATION  IN ('I','U')
 ORDER BY FKCLIENT_T, START_DT
) X
WHERE X.RN = 1
ORDER BY CLIENT_ID, START_DT
OPTIMIZE FOR 100 ROWS
FOR READ ONLY WITH UR ;



